name: CI Test Release

concurrency:
  group: macos-${{ github.workflow }}-${{ github.ref == 'refs/heads/master' && github.sha || github.ref }}
  cancel-in-progress: true

jobs:
  release-build:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, macos-14, windows-latest]
        include:
        - os: ubuntu-22.04
          cc: gcc
        - os: ubuntu-22.04
          target: linux
          artifact: v_linux.zip
        - os: macos-13
          cc: clang
        - os: macos-13
          target: macos_x86_64
          artifact: v_macos_x86_64.zip
        - os: macos-14
          cc: clang
        - os: macos-14
          target: macos_arm64
          artifact: v_macos_arm64.zip
        - os: macos-14
          cflags: -cflags "-target arm64-apple-darwin"
        - os: windows-latest
          cc: msvc
          target: windows
          artifact: v_windows.zip
    fail-fast: false
  runs-on: ${{ matrix.os }}
  timeout-minutes: 121
  env:
    VFLAGS: -cc clang
  steps:
    - name: Compile release binaries
      if: runner.os != 'Windows'
      run: |
        make
        ./v -cc ${{ matrix.cc }} ${{ matrix.cflags }} -prod -o v cmd/v
        ./v -cc ${{ matrix.cc }} ${{ matrix.cflags }} -prod cmd/tools/vup.v
        ./v -cc ${{ matrix.cc }} ${{ matrix.cflags }} -prod cmd/tools/vdoctor.v
    - name: Compile release binaries (Windows)
      if: runner.os == 'Windows'
      run: |
        ./make.bat -msvc
        ./v -prod -cc msvc -o cmd/vprod.exe cmd/v
        ./v -prod -cc msvc cmd/tools/vup.v
        ./v -prod -cc msvc cmd/tools/vdoctor.v
        del ./*.exe
        del ./*.tmp.obj
        move cmd/vprod.exe v.exe
    - name: Prepare artifact
      shell: bash
      run: |
        if [[ ${{ matrix.os }} == 'macos-14' ]]; then
          rm -rf thirdparty/tcc
          git clone --branch thirdparty-macos-arm64 --depth=1 https://github.com/vlang/tccbin thirdparty/tcc
          fi
          # Remove excluded
          if [[ $RUNNER_OS == 'Windows' ]]; then
          find . -type f \( -name "*.ilk" -o -name "*.pdb" \) -exec rm -rf {} +
          rm -rf v_old.exe
        fi
          find . -type d -name ".git" -exec rm -rf {} +
        rm -rf vc/
        rm -rf v_old
        rm -rf vlib/v/tests/bench/gcboehm/*.svg.xz
    - name: Create ZIP archive
      shell: bash
      run: |

        mkdir -p ./release/vlib

        cp -r vlib  ./release/vlib
        cp -r cmd ./release
        if [[ $RUNNER_OS == 'Windows' ]]; then
          cp ./v.exe ./release
        else
          cp ./v ./release
        fi
        if [[ $RUNNER_OS == 'Windows' ]]; then
          7z a -tzip ${{ matrix.artifact }} release/
        else
          zip -r ${{ matrix.artifact }} release/
        fi
    - name: Create artifact
      uses: actions/upload-artifact@v4
      with:
          name: ${{ matrix.target }}
          path: ${{ matrix.artifact }}
